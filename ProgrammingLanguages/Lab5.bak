#lang racket
(define int-builder 
  (lambda (x) 
    (if (= x 1)
        '()
        (append (int-builder (- x 1)) (list x)))))

(define filter-out-mults
  (lambda (num 1st)
    (if (null? 1st)
        '()
        (if (= (modulo (car 1st) num) 0)
            (filter-out-mults num (cdr 1st))
            (cons (car 1st) (filter-out-mults num (cdr 1st)))))))
;; Above is lab5


(define filter-out-mults$
  (lambda (num strm)
    (if(or (< 2 num) (null? strm)) '()
    (if (= (modulo (car strm) num) 0)
        (filter-out-mults$ num (cdr strm))
    (else
        (cons (car strm) (filter-out-mults$ num (cdr strm))))))))



;;Number counting stream
(define int-builder$
  (lambda (x) 
    (cons x (lambda ()
       (int-builder$ (+ x 1))))))

;;Gets a certain number of returns from a stream
(define take$
    (lambda (m s)
      (if (or (= m 0) (null? s))
          '()
          (cons (car s) (take$ (- m 1) ((cdr s)))))))
    